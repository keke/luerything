import org.vertx.java.core.AsyncResult
import org.vertx.java.core.AsyncResultHandler
import org.vertx.java.core.json.JsonObject
import org.vertx.java.platform.PlatformLocator

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit

//apply plugin: 'java'

project.ext.moduleName = "$modowner~$modname~$version";

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.vertx:vertx-core:$vertxVersion"
    classpath "io.vertx:vertx-platform:$vertxVersion"
  }
}

task prepareMod {}

def runVertx(mod) {
  def currentDir = System.getProperty("user.dir")
  println "To start server from $currentDir"
  def webRoot = mod
  if (currentDir.endsWith('/luerything')) {
    webRoot = 'platform/ui/' + webRoot
  }
  def pm = PlatformLocator.factory.createPlatformManager();
  def cfg = new JsonObject();
  cfg.putNumber('port', 8899)
  cfg.putString('web_root', webRoot)
  def latch = new CountDownLatch(1)
  pm.deployModule("io.vertx~mod-web-server~$vertxWebVersion", cfg, 1, new AsyncResultHandler<String>() {
    public void handle(AsyncResult<String> result) {
      if (result.succeeded()) {
        println "CTRL-C to stop server"
      } else {
        println "Failed to deploy module"
        result.cause().printStackTrace()
        latch.countDown()
      }
    }
  });
  latch.await(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
}

task runDistVertx(dependsOn: prepareMod, group: 'UI', description: 'Run dist in vertx') << {
  runVertx('dist')
}

task runDevVertx(dependsOn: prepareMod, group: 'UI', description: 'Run dev in vertx') << {
  runVertx('app')
}


task runDev(type: Exec) {
  group = 'UI'
  description = "Run dev in nodejs server"

  commandLine 'grunt', 'serve'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task runDist(type: Exec) {
  group = 'UI'
  description = 'Run dist in nodejs server'

  commandLine 'grunt', 'serve', '--target=dist'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task test(type: Exec) {
  group = 'UI'
  description = 'Run test'

  commandLine 'grunt', 'test'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task build(type: Exec) {
  group = 'UI'
  description = 'Build UI'

  commandLine 'grunt'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}