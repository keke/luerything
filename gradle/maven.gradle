/*
 * Copyright (c) 2011-2013 The original author or authors
 *   ------------------------------------------------------
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v1.0
 *   and Apache License v2.0 which accompanies this distribution.
 *
 *       The Eclipse Public License is available at
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *       The Apache License v2.0 is available at
 *       http://www.opensource.org/licenses/apache2.0.php
 *
 *   You may elect to redistribute this code under either of these licenses.
 */

apply plugin: 'maven'
apply plugin: 'signing'

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// custom maven tasks

task sourceJar(type: Jar) {
  description = 'Builds a source jar artifact suitable for maven deployment.'
  classifier = 'sources'
  from sourceSets.main.java
}

task javadocJar(type: Jar) {
  description = 'Builds a javadoc jar artifact suitable for maven deployment.'
  classifier = 'javadoc'
  from javadoc.destinationDir
}
javadocJar.dependsOn javadoc

build.dependsOn sourceJar, javadocJar

artifacts {
  archives sourceJar, javadocJar
}

def loadProperties(String sourceFileName) {
  def config = new Properties()
  def propFile = new File(sourceFileName)
  if (propFile.canRead()) {
    config.load(new FileInputStream(propFile))
    for (Map.Entry property in config) {
      project.ext[property.key] = property.value;
    }
  }
}

// We  have to explicitly load props from the user home dir - on CI we set
// GRADLE_USER_HOME to a different dir to avoid problems with concurrent builds corrupting
// a shared Maven local and using Gradle wrapper concurrently
loadProperties("${System.getProperty('user.home')}/.gradle/gradle.properties")

if (!hasProperty('sonatypeUsername')) {
  ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
  ext.sonatypePassword = ''
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// maven task configuration

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  group 'build'
  description = "Does a maven deploy of archives artifacts"

  repositories {
    mavenDeployer {
      configuration = configurations.archives

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      if (isReleaseVersion) {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      }
    }
  }
}

install {
  group = 'build'
  description = "Does a maven install of archives artifacts to local m2 cache"
}

ext {
  ext.poms = []
  afterEvaluate {
    poms*.whenConfigured { pom ->
      pomModifications.each {
        configure(pom, it)
      }
    }
  }
  pomModifications = []
  modifyPom = { pomModifications << it }
}

tasks.withType(Upload) {
  repositories.withType(org.gradle.api.artifacts.maven.MavenResolver) {
    poms << it.pom
  }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// configuration methods

modifyPom {
  project {
    name rootProject.name
    description 'vert.x - Effortless asynchronous application development for the modern web and enterprise'
    groupId rootProject.group
    inceptionYear '2011'
    packaging 'jar'
    url 'http://vertx.io'

    developers {
      developer {
        id 'purplefox'
        name 'Tim Fox'
        email 'tim@tfox.org'
      }
      developer {
        id 'pidster'
        name 'Pid'
        email 'pid@pidster.com'
      }
    }

    scm {
      connection 'scm:https://vert-x@github.com/eclipse/vert.x'
      developerConnection 'scm:git@github.com:eclipse/vert.x.git'
      url 'https://github.com/eclipse/vert.x'
    }

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    properties {
      setProperty('project.build.sourceEncoding', 'UTF8')
    }
  }
}

